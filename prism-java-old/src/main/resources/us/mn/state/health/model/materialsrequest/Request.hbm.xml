<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping SYSTEM
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<!--
The mapping for the Request class
-->
<hibernate-mapping package="us.mn.state.health.model.materialsrequest">

    <class name="Request"
           table="MATERIALS_REQUEST_TBL"
           lazy="true">

        <cache usage="read-write"/>

        <!-- id property. -->
        <id name="requestId"
            type="long"
            column="REQUEST_ID"
            unsaved-value="null">
            <generator class="sequence">
                <param name="sequence">ENTERPRISE_SEQ</param>
            </generator>
        </id>

        <!-- A versioned entity, for managed versioning for optimistic locking.-->
        <version name="version"
                 column="VERSION"/>

        <property name="dateRequested"
                  column="DATE_REQUESTED"
                  type="java.sql.Timestamp"
                  not-null="true"
                  update="false"/>

        <property name="needByDate"
                  column="DATE_NEEDED"
                  type="date"
                  not-null="false"/>

        <property name="additionalInstructions"
                  column="ADDITIONAL_INSTRUCTIONS"
                  type="string"
                  not-null="false"/>

        <property name="trackingNumber"
                  column="TRACKING_NUMBER"
                  type="string"
                  not-null="false"
                  unique="true"/>

        <property name="helpDeskticketId"
                  column="TICKET_ID"
                  type="java.lang.Long"
                  not-null="false"
                  unique="true"/>

        <many-to-one name="priority"
                     class="us.mn.state.health.model.common.Priority"
                     column="PRIORITY_ID"
                     cascade="none"
                     not-null="true"/>

        <many-to-one name="requestor"
                     class="us.mn.state.health.model.common.Person"
                     column="REQUESTOR_PERSON_ID"
                     cascade="none"
                     not-null="false"/>

        <many-to-one name="deliveryDetail"
                     class="us.mn.state.health.model.materialsrequest.DeliveryDetail"
                     column="DELIVERY_DETAIL_ID"
                     cascade="all"
                     not-null="true"
                     unique="true"
                     insert="true"
                     update="true"/>

        <set name="requestLineItems"
             cascade="all,delete-orphan"
             lazy="true" order-by="REQUEST_LINE_ITEM_ID">
            <cache usage="nonstrict-read-write"/>
            <key column="REQUEST_ID"/>
            <one-to-many class="us.mn.state.health.model.materialsrequest.RequestLineItem"/>
        </set>

    </class>

    <query name="findByEvaluatorAndStatusCode">
        <![CDATA[
            select distinct r 
            from Request as r
             join r.requestLineItems as rli
             join rli.requestEvaluations as reqEval
            where rli.status.statusCode = 'WFA' 
             and reqEval.evaluationDecision.statusType.code = 'MRQ' 
             and reqEval.evaluationDecision.statusCode = :statusCode
             and reqEval.evaluatorGroup in (select g
                                            from Group as g
                                             join g.personGroupLinks as pgl
                                            where pgl.person = :evaluator)  
        ]]>
    </query>

    <query name="findRequestByStatusCode">
        <![CDATA[
            select distinct r
            from Request as r
                join r.requestLineItems as rli
            where rli.status.statusCode = :statusCode
            order by r.dateRequested ASC, r.trackingNumber ASC
        ]]>
    </query>

    <query name="countRequestsByStatusCode">
        <![CDATA[
            select count(distinct r)
            from Request as r
                join r.requestLineItems as rli
            where rli.status.statusCode = :statusCode
        ]]>
    </query>

    <query name="countNonBackOrderedRequests">
        <![CDATA[
            select count(distinct r.requestId) from Request r
                join r.requestLineItems rli
                join rli.item item
                where (select count(si.itemId) from StockItem si
                 where si.itemId = item.itemId
                 and
                 si.qtyOnHand>0 )>  0
                 and
                rli.status.statusCode = 'WFD'
        ]]>
    </query>

    <query name="findRequestIdsByStatusCodeAsc">
        <![CDATA[
            select distinct r.requestId 
            from Request as r
                join r.requestLineItems as rli
            where rli.status.statusCode = :statusCode
            order by r.requestId asc
        ]]>
    </query>

    <query name="findRequestIdsForNonBackOrderedRequests">
        <![CDATA[
            select distinct r.requestId, r.needByDate, r.priority.codeNumber, r.dateRequested from Request r
            join r.requestLineItems rli
            join rli.item item
            where (select count(si.itemId) from StockItem si
             where si.itemId = item.itemId
             and
             si.qtyOnHand>0 )>  0
             and
            rli.status.statusCode = 'WFD'
            order by r.requestId desc
        ]]>
    </query>

    <query name="findMyRequests">
        <![CDATA[
            select distinct r
            from Request as r
                join r.requestLineItems as rli
                join fetch r.deliveryDetail dd
            where r.requestor = :requestor
            order by r.requestId desc
        ]]>
    </query>

    <query name="findRequestsUsingRliId">
        <![CDATA[
            select distinct r
            from Request as r
                join r.requestLineItems as rli
            where rli.requestLineItemId in (:rliIds)
        ]]>
    </query>

    <query name="findRequestIdsUsingRliId">
        <![CDATA[
            select distinct r.requestId 
            from Request as r
                join r.requestLineItems as rli
            where rli.requestLineItemId in (:rliIds) order by r.requestId desc
        ]]>
    </query>

    <query name="findRequestByIdsEagerRLIEagerItemAsc">
        <![CDATA[
            select r from Request as r
                left join fetch r.requestLineItems as rli
                left join fetch rli.item as item
            where r.requestId in (:ids)
            order by r.requestId asc
        ]]>
    </query>

    <query name="findNonBackOrderedRequestsByIds">
        select r from Request as r
        left join fetch r.requestLineItems as rli
        left join fetch rli.item as item
        where r.requestId in (:ids)
        order by r.requestId desc
    </query>

    <query name="findIsOnOrderRequestsForStockItem">
        select rli.request from RequestLineItem rli
        where rli.item.itemId = :stockItemId
        and rli.status.statusCode in ('WFP', 'ORD', 'RCP')
        order by rli.request.requestId asc
    </query>

</hibernate-mapping>